services:
  # PostgreSQL Database
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: stock_monitor_postgres
    environment:
      POSTGRES_DB: stock_monitor
      POSTGRES_USER: stock_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_postgres_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stock_user -d stock_monitor"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stock_monitor_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InfluxDB (Alternative time-series database)
  influxdb:
    image: influxdb:2.7-alpine
    container_name: stock_monitor_influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD:-your_influxdb_password}
      DOCKER_INFLUXDB_INIT_ORG: stock_monitor
      DOCKER_INFLUXDB_INIT_BUCKET: market_data
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN:-your_influxdb_token}
    volumes:
      - influxdb_data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: stock_monitor_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    depends_on:
      - stock_monitor

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: stock_monitor_grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus
      - influxdb
      - postgres

  # Main Stock Monitor Application
  stock_monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: stock_monitor_app
    environment:
      - CONFIG_PATH=/app/config/config.yaml
      - PYTHONPATH=/app:/app/src
    volumes:
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    ports:
      - "8080:8080"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: stock_monitor_celery
    command: celery -A src.celery_app:app worker --loglevel=info
    environment:
      - CONFIG_PATH=/app/config/config.yaml
      - PYTHONPATH=/app:/app/src
    volumes:
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      - redis
      - postgres

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: stock_monitor_celery_beat
    command: celery -A src.celery_app:app beat --loglevel=info
    environment:
      - CONFIG_PATH=/app/config/config.yaml
      - PYTHONPATH=/app:/app/src
    volumes:
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      - redis
      - postgres

  # Flower for Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: stock_monitor_celery_flower
    command: celery -A src.celery_app:app flower --port=5555
    environment:
      - CONFIG_PATH=/app/config/config.yaml
      - PYTHONPATH=/app:/app/src
    ports:
      - "5555:5555"
    restart: unless-stopped
    depends_on:
      - redis
      - celery_worker

  # Redis Exporter for Prometheus metrics
  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: stock_monitor_redis_exporter
    command: ["--redis.addr=redis://stock_monitor_redis:6379"]
    ports:
      - "9121:9121"
    restart: unless-stopped
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # PostgreSQL Exporter for Prometheus metrics
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: stock_monitor_postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://stock_user:${POSTGRES_PASSWORD:-your_postgres_password}@stock_monitor_postgres:5432/stock_monitor?sslmode=disable"
    ports:
      - "9187:9187"
    restart: unless-stopped
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Nginx Reverse Proxy for public access
  nginx:
    image: nginx:alpine
    container_name: stock_monitor_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
      - "8000:8000"  # Additional port for public access
    restart: unless-stopped
    depends_on:
      - stock_monitor
      - grafana

  # Cloudflare Tunnel for permanent public access
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: stock_monitor_tunnel
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    restart: unless-stopped
    depends_on:
      - grafana

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: stock_monitor_network 